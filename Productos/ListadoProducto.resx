<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        FBR0Dxtt9H+pYw9Bwic7ZQAAAABJRU5ErkJggg==
</value>
  </data>
</root>